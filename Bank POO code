from datetime import date

class Cliente:
    def __init__(self, endereco):
        self.endereco = endereco
        self.contas = []

    def realizar_transacao(self, conta, transacao):
        transacao.registrar(conta)

    def adicionar_conta(self, conta):
        self.contas.append(conta)

class PessoaFisica(Cliente):
    def __init__(self, nome, data_nascimento, cpf, endereco):
        super().__init__(endereco)
        self.nome = nome
        self.data_nascimento = data_nascimento
        self.cpf = cpf

class Conta:
    def __init__(self, cliente, numero):
        self._saldo = 0
        self._numero = numero
        self._agencia = "0001"
        self._cliente = cliente
        self._historico = Historico()

    @classmethod
    def nova_conta(cls, cliente, numero):
        return cls(cliente, numero)

    @property
    def saldo(self):
        return self._saldo

    @property
    def numero(self):
        return self._numero

    @property
    def agencia(self):
        return self._agencia

    @property
    def cliente(self):
        return self._cliente

    @property
    def historico(self):
        return self._historico

    def sacar(self, valor):
        saldo = self.saldo
        excedeu_saldo = valor > saldo

        if excedeu_saldo:
            print("\n❌ Operação falhou! Você não tem saldo suficiente.")
        elif valor > 0:
            self._saldo -= valor
            print("\n✅ Saque realizado com sucesso!")
            return True
        else:
            print("\n❌ Operação falhou! O valor informado é inválido.")
            return False

    def depositar(self, valor):
        if valor > 0:
            self._saldo += valor
            print("\n✅ Depósito realizado com sucesso!")
            return True
        else:
            print("\n❌ Operação falhou! O valor informado é inválido.")
            return False

class ContaCorrente(Conta):
    def __init__(self, cliente, numero, limite=500, limite_saques=3):
        super().__init__(cliente, numero)
        self.limite = limite
        self.limite_saques = limite_saques

    def sacar(self, valor):
        numero_saques = len(
            [transacao for transacao in self.historico.transacoes if transacao["tipo"] == Saque.__name__]
        )

        excedeu_limite = valor > self.limite
        excedeu_saques = numero_saques >= self.limite_saques

        if excedeu_limite:
            print("\n❌ Operação falhou! O valor do saque excede o limite.")
            return False
        elif excedeu_saques:
            print("\n❌ Operação falhou! Número máximo de saques diários atingido.")
            return False
        else:
            return super().sacar(valor)

    def __str__(self):
        return f"""\
            Agência:\t{self.agencia}
            C/C:\t\t{self.numero}
            Titular:\t{self.cliente.nome}
        """

class Historico:
    def __init__(self):
        self._transacoes = []

    @property
    def transacoes(self):
        return self._transacoes

    def adicionar_transacao(self, transacao):
        self._transacoes.append(
            {
                "tipo": transacao.__class__.__name__,
                "valor": transacao.valor,
            }
        )

class Transacao:
    def __init__(self, valor):
        self._valor = valor

    @property
    def valor(self):
        return self._valor

    def registrar(self, conta):
        pass

class Saque(Transacao):
    def registrar(self, conta):
        sucesso_transacao = conta.sacar(self.valor)
        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)
            return True

class Deposito(Transacao):
    def registrar(self, conta):
        sucesso_transacao = conta.depositar(self.valor)
        if sucesso_transacao:
            conta.historico.adicionar_transacao(self)
            return True

# Funções auxiliares para o menu e a lógica principal
def buscar_cliente(cpf, clientes):
    clientes_filtrados = [cliente for cliente in clientes if cliente.cpf == cpf]
    return clientes_filtrados[0] if clientes_filtrados else None

def buscar_conta_cliente(cliente, numero_conta):
    contas_filtradas = [
        conta for conta in cliente.contas if conta.numero == numero_conta
    ]
    return contas_filtradas[0] if contas_filtradas else None

def main():
    clientes = []
    contas = []

    def menu():
        return """\n
        ============= MENU =============
        [d]  Depositar
        [s]  Sacar
        [e]  Extrato
        [nc] Nova conta
        [lc] Listar contas
        [nu] Novo usuário
        [q]  Sair
        ================================
        => """

    def depositar_func(clientes):
        cpf = input("Informe o CPF do cliente: ")
        cliente = buscar_cliente(cpf, clientes)
        if not cliente:
            print("\n❌ Cliente não encontrado!")
            return

        valor = float(input("Informe o valor do depósito: "))
        transacao = Deposito(valor)
        conta = recuperar_conta_cliente(cliente)
        if not conta:
            return
        cliente.realizar_transacao(conta, transacao)

    def sacar_func(clientes):
        cpf = input("Informe o CPF do cliente: ")
        cliente = buscar_cliente(cpf, clientes)
        if not cliente:
            print("\n❌ Cliente não encontrado!")
            return
        
        valor = float(input("Informe o valor do saque: "))
        transacao = Saque(valor)
        conta = recuperar_conta_cliente(cliente)
        if not conta:
            return
        cliente.realizar_transacao(conta, transacao)

    def extrato_func(clientes):
        cpf = input("Informe o CPF do cliente: ")
        cliente = buscar_cliente(cpf, clientes)
        if not cliente:
            print("\n❌ Cliente não encontrado!")
            return
        
        conta = recuperar_conta_cliente(cliente)
        if not conta:
            return
        
        print("\n================ EXTRATO ================")
        transacoes = conta.historico.transacoes
        if not transacoes:
            print("Não foram realizadas movimentações.")
        else:
            for transacao in transacoes:
                print(f"{transacao['tipo']}: R$ {transacao['valor']:.2f}")
        print(f"\nSaldo:\t\tR$ {conta.saldo:.2f}")
        print("==========================================")

    def criar_cliente(clientes):
        cpf = input("Informe o CPF (somente números): ")
        cliente = buscar_cliente(cpf, clientes)
        if cliente:
            print("\n❌ Já existe um cliente com este CPF!")
            return

        nome = input("Informe o nome completo: ")
        data_nascimento = input("Informe a data de nascimento (dd-mm-aaaa): ")
        endereco = input("Informe o endereço (logradouro, nro - bairro - cidade/sigla estado): ")
        cliente = PessoaFisica(nome=nome, data_nascimento=data_nascimento, cpf=cpf, endereco=endereco)
        clientes.append(cliente)
        print("\n✅ Cliente criado com sucesso!")

    def criar_conta(numero_conta, clientes, contas):
        cpf = input("Informe o CPF do cliente: ")
        cliente = buscar_cliente(cpf, clientes)
        if not cliente:
            print("\n❌ Cliente não encontrado, fluxo de criação de conta encerrado!")
            return

        conta = ContaCorrente.nova_conta(cliente=cliente, numero=numero_conta)
        contas.append(conta)
        cliente.adicionar_conta(conta)
        print("\n✅ Conta criada com sucesso!")

    def listar_contas(contas):
        if not contas:
            print("\nNenhuma conta cadastrada.")
        else:
            print("\n============== CONTAS CADASTRADAS ==============")
            for conta in contas:
                print("=" * 100)
                print(str(conta))

    def recuperar_conta_cliente(cliente):
        if not cliente.contas:
            print("\n❌ Cliente não possui conta!")
            return
        
        # Implementação simplificada para um único cliente com uma única conta
        return cliente.contas[0]

    numero_conta = 1

    while True:
        opcao = input(menu())

        if opcao == "d":
            depositar_func(clientes)
        elif opcao == "s":
            sacar_func(clientes)
        elif opcao == "e":
            extrato_func(clientes)
        elif opcao == "nu":
            criar_cliente(clientes)
        elif opcao == "nc":
            criar_conta(numero_conta, clientes, contas)
            numero_conta += 1
        elif opcao == "lc":
            listar_contas(contas)
        elif opcao == "q":
            print("Obrigado por utilizar nossos serviços!")
            break
        else:
            print("\nOperação inválida, por favor selecione novamente a opção desejada.")

main()
